{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/core/password-input/","result":{"data":{"mdx":{"headings":[{"depth":2,"value":"Usage"},{"depth":2,"value":"Strength meter example"},{"depth":2,"value":"Focus behavior"},{"depth":2,"value":"Controlled"},{"depth":2,"value":"Get element ref"},{"depth":2,"value":"Accessibility"}],"frontmatter":{"title":"PasswordInput","package":"@mantine/core","slug":"/core/password-input/","props":["PasswordInput"],"import":"import { PasswordInput } from '@mantine/core';","docs":"core/PasswordInput.mdx","source":"mantine-core/src/components/PasswordInput/PasswordInput.tsx","description":"Capture password from user with option to toggle visibility","bundleSize":null,"installation":null,"pageTitle":null,"license":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"group\": \"mantine-core\",\n  \"package\": \"@mantine/core\",\n  \"title\": \"PasswordInput\",\n  \"order\": 1,\n  \"slug\": \"/core/password-input/\",\n  \"category\": \"inputs\",\n  \"description\": \"Capture password from user with option to toggle visibility\",\n  \"props\": [\"PasswordInput\"],\n  \"import\": \"import { PasswordInput } from '@mantine/core';\",\n  \"source\": \"mantine-core/src/components/PasswordInput/PasswordInput.tsx\",\n  \"docs\": \"core/PasswordInput.mdx\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar GatsbyLink = makeShortcode(\"GatsbyLink\");\nvar Demo = makeShortcode(\"Demo\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"p\", null, \"Use PasswordInput when you need to capture password from user.\\nComponent provides option to toggle password visibility, if you do not this feature, use \", mdx(GatsbyLink, {\n    to: \"/core/text-input/\",\n    mdxType: \"GatsbyLink\"\n  }, \"TextInput\"), \" component with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"type=\\\"password\\\"\"), \".\\nComponent supports all props from \", mdx(GatsbyLink, {\n    to: \"/core/input/\",\n    mdxType: \"GatsbyLink\"\n  }, \"Input\"), \" and \", mdx(GatsbyLink, {\n    to: \"/core/input-wrapper/\",\n    mdxType: \"GatsbyLink\"\n  }, \"InputWrapper\"), \" components.\\nSee full information about shared inputs props in \", mdx(GatsbyLink, {\n    to: \"/guides/inputs/\",\n    mdxType: \"GatsbyLink\"\n  }, \"inputs guide\"), \".\"), mdx(Demo, {\n    data: PasswordInputDemos.configurator,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"strength-meter-example\"\n  }, \"Strength meter example\"), mdx(\"p\", null, \"Password strength meter example with \", mdx(GatsbyLink, {\n    to: \"/core/progress/\",\n    mdxType: \"GatsbyLink\"\n  }, \"Progress\"), \" and \", mdx(GatsbyLink, {\n    to: \"/core/popover/\",\n    mdxType: \"GatsbyLink\"\n  }, \"Popover\"), \" components:\"), mdx(Demo, {\n    data: PasswordInputDemos.strengthMeter,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"focus-behavior\"\n  }, \"Focus behavior\"), mdx(\"p\", null, \"You can control focus behavior with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"focusInputOnToggle\"), \".\\nIf prop is true then focus will be moved to input when visibility changes, otherwise focus will be left on toggle button.\"), mdx(Demo, {\n    data: PasswordInputDemos.focus,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"controlled\"\n  }, \"Controlled\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import React, { useState } from 'react';\\nimport { PasswordInput } from '@mantine/core';\\n\\nfunction Demo() {\\n  const [value, setValue] = useState('');\\n  return <PasswordInput value={value} onChange={(event) => setValue(event.currentTarget.value)} />;\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"get-element-ref\"\n  }, \"Get element ref\"), mdx(\"p\", null, \"You can get input ref by passing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"elementRef\"), \" prop to PasswordInput component:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import React, { useRef } from 'react';\\nimport { PasswordInput } from '@mantine/core';\\n\\nfunction PasswordInputDemo() {\\n  const ref = useRef(null);\\n  return <PasswordInput elementRef={ref} />;\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"accessibility\"\n  }, \"Accessibility\"), mdx(\"p\", null, \"To make component more accessible for users with screen readers set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"showPasswordLabel\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"hidePasswordLabel\"), \"\\nprops. One of these props is added as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"title\"), \" to visibility toggle button according to state:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<PasswordInput showPasswordLabel=\\\"Show password\\\" hidePasswordLabel=\\\"Hide password\\\" />\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"f11a9fcd-cd15-533b-a72e-13fd1624f6a4","slug":"core/PasswordInput","__params":{"slug":"core"}}},"staticQueryHashes":["1423860837","2548225466","3507612243"]}