{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/core/input/","result":{"data":{"mdx":{"headings":[{"depth":2,"value":"Usage"},{"depth":2,"value":"Variants"},{"depth":2,"value":"Icon and right section"},{"depth":2,"value":"Custom component"},{"depth":2,"value":"Get element ref"},{"depth":2,"value":"TypeScript"}],"frontmatter":{"title":"Input","package":"@mantine/core","slug":"/core/input/","props":["Input"],"import":"import { Input } from '@mantine/core';","docs":"core/Input.mdx","source":"mantine-core/src/components/Input/Input.tsx","description":"Base component to create custom inputs","bundleSize":null,"installation":null,"pageTitle":null,"license":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"group\": \"mantine-core\",\n  \"package\": \"@mantine/core\",\n  \"title\": \"Input\",\n  \"order\": 1,\n  \"slug\": \"/core/input/\",\n  \"category\": \"inputs\",\n  \"description\": \"Base component to create custom inputs\",\n  \"props\": [\"Input\"],\n  \"import\": \"import { Input } from '@mantine/core';\",\n  \"source\": \"mantine-core/src/components/Input/Input.tsx\",\n  \"docs\": \"core/Input.mdx\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar GatsbyLink = makeShortcode(\"GatsbyLink\");\nvar Demo = makeShortcode(\"Demo\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"p\", null, \"Input component is used as base for all other inputs (\", mdx(GatsbyLink, {\n    to: \"/core/select/\",\n    mdxType: \"GatsbyLink\"\n  }, \"Select\"), \", \", mdx(GatsbyLink, {\n    to: \"/core/text-input/\",\n    mdxType: \"GatsbyLink\"\n  }, \"TextInput\"), \", \", mdx(GatsbyLink, {\n    to: \"/core/textarea/\",\n    mdxType: \"GatsbyLink\"\n  }, \"Textarea\"), \" and others).\\nThe single purpose of Input is to provide shared styles and features to other inputs.\\nUse other components listed above to build forms (as they provide better accessibility)\\nand Input component as base for your own custom inputs with Mantine theme.\\nSee \", mdx(GatsbyLink, {\n    to: \"/guides/inputs/\",\n    mdxType: \"GatsbyLink\"\n  }, \"guide on inputs\"), \" to learn how to build custom inputs with this component.\"), mdx(Demo, {\n    data: InputDemos.configurator,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"variants\"\n  }, \"Variants\"), mdx(\"p\", null, \"Input has 3 variants, all of which are available on all Mantine inputs.\\nNote that unstyled input variant may significantly impact usability, use it wisely.\"), mdx(Demo, {\n    data: InputDemos.variants,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"icon-and-right-section\"\n  }, \"Icon and right section\"), mdx(\"p\", null, \"You can add icon on the left side of the input, for example:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://icons.modulz.app/\"\n  }, \"radix icons\"), \" (used in mantine packages)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://feathericons.com/\"\n  }, \"feather\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://react-icons.github.io/react-icons\"\n  }, \"react-icons\"))), mdx(Demo, {\n    data: InputDemos.icon,\n    mdxType: \"Demo\"\n  }), mdx(\"p\", null, \"Right section allows you to place anything on the right side of the input. For example, in \", mdx(GatsbyLink, {\n    to: \"/core/password-input/\",\n    mdxType: \"GatsbyLink\"\n  }, \"PasswordInput\"), \"\\ncomponent right section is used for show/hide password toggle:\"), mdx(Demo, {\n    data: ActionIconDemos.usage,\n    mdxType: \"Demo\"\n  }), mdx(\"p\", null, \"Or you can add keyboard shortcut like in search on Mantine docs website:\"), mdx(Demo, {\n    data: KbdDemos.input,\n    mdxType: \"Demo\"\n  }), mdx(\"p\", null, \"Right section with \", mdx(GatsbyLink, {\n    to: \"/core/tooltip/\",\n    mdxType: \"GatsbyLink\"\n  }, \"Tooltip\"), \":\"), mdx(Demo, {\n    data: InputDemos.tooltip,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"custom-component\"\n  }, \"Custom component\"), mdx(\"p\", null, \"As Input component is intended to be a base for all other inputs,\\nyou can pass \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"component\"), \" prop which will define root element:\"), mdx(Demo, {\n    data: InputDemos.component,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"get-element-ref\"\n  }, \"Get element ref\"), mdx(\"p\", null, \"You can get input ref by passing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"elementRef\"), \" prop to Input component:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import React, { useRef } from 'react';\\nimport { Input } from '@mantine/core';\\n\\nfunction Demo() {\\n  const ref = useRef(null);\\n  return <Input elementRef={ref} />;\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"typescript\"\n  }, \"TypeScript\"), mdx(\"p\", null, \"You need to pass additional types to use custom component with TypeScript\\nin case you need full type coverage for events and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"elementRef\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<Input<'button', HTMLButtonElement>\\n  component=\\\"button\\\"\\n  onClick={(event) => console.log(event)}\\n  elementRef={(node) => {\\n    window.myRef = node;\\n  }}\\n/>\\n\\n<Input<typeof YourTextarea, HTMLTextareaElement>\\n  component={YourTextarea}\\n  onClick={(event) => console.log(event)}\\n  elementRef={(node) => {\\n    window.myRef = node;\\n  }}\\n/>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"fcfc81e9-705f-53d8-9bfb-0d2b2a51652a","slug":"core/Input","__params":{"slug":"core"}}},"staticQueryHashes":["1423860837","2548225466","3507612243"]}