{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/hooks/use-merged-ref/","result":{"data":{"mdx":{"headings":[{"depth":2,"value":"Usage"},{"depth":2,"value":"TypeScript"},{"depth":3,"value":"Definition"},{"depth":3,"value":"Set node type"}],"frontmatter":{"title":"use-merged-ref","package":"@mantine/hooks","slug":"/hooks/use-merged-ref/","props":null,"import":"import { useMergedRef } from '@mantine/hooks';","docs":"hooks/use-merged-ref.mdx","source":"mantine-hooks/src/use-merged-ref/use-merged-ref.ts","description":"Use multiple refs for one dom node","bundleSize":null,"installation":null,"pageTitle":null,"license":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"group\": \"mantine-hooks\",\n  \"package\": \"@mantine/hooks\",\n  \"title\": \"use-merged-ref\",\n  \"category\": \"dom\",\n  \"order\": 1,\n  \"slug\": \"/hooks/use-merged-ref/\",\n  \"description\": \"Use multiple refs for one dom node\",\n  \"import\": \"import { useMergedRef } from '@mantine/hooks';\",\n  \"docs\": \"hooks/use-merged-ref.mdx\",\n  \"source\": \"mantine-hooks/src/use-merged-ref/use-merged-ref.ts\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar GatsbyLink = makeShortcode(\"GatsbyLink\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"p\", null, \"Hook accepts any amount of refs and returns function that should be passed to dom node.\\nUse hook when you need to use more than one ref on single dom node, for example,\\nwhen you want to use \", mdx(GatsbyLink, {\n    to: \"/hooks/use-click-outside/\",\n    mdxType: \"GatsbyLink\"\n  }, \"use-click-outside\"), \" and \", mdx(GatsbyLink, {\n    to: \"/hooks/use-focus-trap/\",\n    mdxType: \"GatsbyLink\"\n  }, \"use-focus-trap\"), \" hooks and also get a ref for yourself:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import React, { useRef } from 'react';\\nimport { useClickOutside, useFocusTrap, useMergedRef } from '@mantine/hooks';\\n\\nfunction Demo() {\\n  const myRef = useRef();\\n  const useClickOutsideRef = useClickOutside(() => {});\\n  const focusTrapRef = useFocusTrap();\\n  const mergedRef = useMergedRef(myRef, useClickOutsideRef, focusTrapRef);\\n\\n  return <div ref={mergedRef} />;\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"typescript\"\n  }, \"TypeScript\"), mdx(\"h3\", {\n    \"id\": \"definition\"\n  }, \"Definition\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"function useMergedRef<T = any>(...refs: React.ForwardedRef<T>[]): (node: T) => void;\\n\")), mdx(\"h3\", {\n    \"id\": \"set-node-type\"\n  }, \"Set node type\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"useMergedRef<HTMLDivElement>();\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"48cc74f8-209d-5e8c-96ec-58140799a294","slug":"hooks/use-merged-ref","__params":{"slug":"hooks"}}},"staticQueryHashes":["1423860837","2548225466","3507612243"]}