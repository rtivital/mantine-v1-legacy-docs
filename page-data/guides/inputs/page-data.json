{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/guides/inputs/","result":{"data":{"mdx":{"headings":[{"depth":1,"value":"Mantine inputs"},{"depth":2,"value":"Input types"},{"depth":2,"value":"InputWrapper component"},{"depth":2,"value":"Input component"},{"depth":2,"value":"Accessibility"},{"depth":2,"value":"Building custom inputs"},{"depth":3,"value":"JsonInput"},{"depth":3,"value":"ColorInput"}],"frontmatter":{"title":"Mantine inputs","package":null,"slug":"/guides/inputs/","props":null,"import":null,"docs":null,"source":null,"description":null,"bundleSize":null,"installation":null,"pageTitle":null,"license":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"order\": 1,\n  \"group\": \"guides\",\n  \"title\": \"Mantine inputs\",\n  \"slug\": \"/guides/inputs/\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar GatsbyLink = makeShortcode(\"GatsbyLink\");\nvar Demo = makeShortcode(\"Demo\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"mantine-inputs\"\n  }, \"Mantine inputs\"), mdx(\"p\", null, \"Mantine comes with essential set of inputs to help you build forms.\\nMost of the inputs share the same props, this guide will help you\\nlearn about patters which should be used with inputs to ensure\\nnest accessibility and usability.\"), mdx(\"h2\", {\n    \"id\": \"input-types\"\n  }, \"Input types\"), mdx(\"p\", null, \"Mantine inputs can be divided into two categories: with and without \", mdx(GatsbyLink, {\n    to: \"/core/input-wrapper/\",\n    mdxType: \"GatsbyLink\"\n  }, \"InputWrapper\"), \".\"), mdx(\"p\", null, \"Inputs with \", mdx(GatsbyLink, {\n    to: \"/core/input-wrapper/\",\n    mdxType: \"GatsbyLink\"\n  }, \"InputWrapper\"), \":\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(GatsbyLink, {\n    to: \"/core/text-input/\",\n    mdxType: \"GatsbyLink\"\n  }, \"TextInput\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(GatsbyLink, {\n    to: \"/core/password-input/\",\n    mdxType: \"GatsbyLink\"\n  }, \"PasswordInput\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(GatsbyLink, {\n    to: \"/core/number-input/\",\n    mdxType: \"GatsbyLink\"\n  }, \"NumberInput\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(GatsbyLink, {\n    to: \"/core/radio-group/\",\n    mdxType: \"GatsbyLink\"\n  }, \"RadioGroup\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(GatsbyLink, {\n    to: \"/core/select/\",\n    mdxType: \"GatsbyLink\"\n  }, \"Select\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(GatsbyLink, {\n    to: \"/core/textarea/\",\n    mdxType: \"GatsbyLink\"\n  }, \"Textarea\"))), mdx(WrappedInputsDemo, {\n    mdxType: \"WrappedInputsDemo\"\n  }), mdx(\"p\", null, \"Inputs without \", mdx(GatsbyLink, {\n    to: \"/core/input-wrapper/\",\n    mdxType: \"GatsbyLink\"\n  }, \"InputWrapper\"), \":\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(GatsbyLink, {\n    to: \"/core/checkbox/\",\n    mdxType: \"GatsbyLink\"\n  }, \"Checkbox\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(GatsbyLink, {\n    to: \"/core/switch/\",\n    mdxType: \"GatsbyLink\"\n  }, \"Switch\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(GatsbyLink, {\n    to: \"/core/segmented-control/\",\n    mdxType: \"GatsbyLink\"\n  }, \"SegmentedControl\"))), mdx(RegularInputsDemo, {\n    mdxType: \"RegularInputsDemo\"\n  }), mdx(\"h2\", {\n    \"id\": \"inputwrapper-component\"\n  }, \"InputWrapper component\"), mdx(\"p\", null, \"All inputs with \", mdx(GatsbyLink, {\n    to: \"/core/input-wrapper/\",\n    mdxType: \"GatsbyLink\"\n  }, \"InputWrapper\"), \"\\nsupport these optional props:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"label\"), \" \\u2013 input label, bind to input element with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"for\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"required\"), \" \\u2013 displays required asterisk at the end of the label\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"description\"), \" \\u2013 displays description after label, put additional information here, for example, password requirements\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"error\"), \" \\u2013 any react node to displays error message after input and highlight input border with red color, or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"true\"), \" just for input border highlight\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<TextInput\\n  required\\n  label=\\\"Input label\\\"\\n  description=\\\"Put additional information about input here\\\"\\n  error=\\\"Display validation error\\\"\\n/>\\n\")), mdx(Demo, {\n    data: InputWrapperDemos.configurator,\n    demoProps: {\n      toggle: true\n    },\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"input-component\"\n  }, \"Input component\"), mdx(\"p\", null, \"Mantine exports utility \", mdx(GatsbyLink, {\n    to: \"/core/input/\",\n    mdxType: \"GatsbyLink\"\n  }, \"Input\"), \" component.\\nThis component is a base for\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(GatsbyLink, {\n    to: \"/core/text-input/\",\n    mdxType: \"GatsbyLink\"\n  }, \"TextInput\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(GatsbyLink, {\n    to: \"/core/password-input/\",\n    mdxType: \"GatsbyLink\"\n  }, \"PasswordInput\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(GatsbyLink, {\n    to: \"/core/number-input/\",\n    mdxType: \"GatsbyLink\"\n  }, \"NumberInput\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(GatsbyLink, {\n    to: \"/core/select/\",\n    mdxType: \"GatsbyLink\"\n  }, \"Select\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(GatsbyLink, {\n    to: \"/core/textarea/\",\n    mdxType: \"GatsbyLink\"\n  }, \"Textarea\"))), mdx(\"p\", null, \"Since all these inputs share the same parent \", mdx(GatsbyLink, {\n    to: \"/core/input/\",\n    mdxType: \"GatsbyLink\"\n  }, \"Input\"), \" component\\nthey support props:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"icon\"), \" \\u2013 renders icon on the left\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"radius\"), \" \\u2013 applies border-radius from theme\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"disabled\"), \" \\u2013 disables any interactions with input\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"variant\"), \" \\u2013 choose between default, filled and unstyled variant\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"rightSection\"), \" related props (not supported by Select, NumberInput and PasswordInput) to add extra content on the right\")), mdx(\"p\", null, \"Go to \", mdx(GatsbyLink, {\n    to: \"/core/input/\",\n    mdxType: \"GatsbyLink\"\n  }, \"Input component docs\"), \" to see examples of all above props usage.\"), mdx(\"h2\", {\n    \"id\": \"accessibility\"\n  }, \"Accessibility\"), mdx(\"p\", null, \"Please follow accessibility guidelines for each input individually.\\nMost of the inputs have shared rule about label \\u2013\\nprovide \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"aria-label\"), \" in case you use component without label for screen reader support:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<TextInput label=\\\"My input\\\" />; // -> ok, input and label is connected\\n<TextInput />; // not ok, input is not labeled\\n<TextInput aria-label=\\\"My input\\\" />; // -> ok, label is not visible but will be announced by screen reader\\n\")), mdx(\"h2\", {\n    \"id\": \"building-custom-inputs\"\n  }, \"Building custom inputs\"), mdx(\"p\", null, \"@mantine/core and @mantine/hooks come with all utilities that you need to build custom inputs.\\nThese examples with provide a reference on how to enhance existing components with extra logic to fit your needs\\nand how to use mantine packages to create completely new accessible inputs based on \", mdx(GatsbyLink, {\n    to: \"/core/input/\",\n    mdxType: \"GatsbyLink\"\n  }, \"Input\"), \"\\nand \", mdx(GatsbyLink, {\n    to: \"/core/input-wrapper/\",\n    mdxType: \"GatsbyLink\"\n  }, \"InputWrapper\"), \" components.\"), mdx(\"h3\", {\n    \"id\": \"jsoninput\"\n  }, \"JsonInput\"), mdx(\"p\", null, \"JsonInput uses autosize variant of \", mdx(GatsbyLink, {\n    to: \"/core/textarea/\",\n    mdxType: \"GatsbyLink\"\n  }, \"Textarea\"), \"\\ncomponent, which accepts json, validates and formats it.\"), mdx(JsonInputDemo, {\n    mdxType: \"JsonInputDemo\"\n  }), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Key moments:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"inputStyle\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"inputClassName\"), \" to apply styles to input element (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"style\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"className\"), \" props will go to InputWrapper)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"onChange\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"onFocus\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"onBlur\"), \" and all other input related props go directly to input element\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"typeof Textarea\"), \" to get Textarea component props in TypeScript\")), mdx(\"h3\", {\n    \"id\": \"colorinput\"\n  }, \"ColorInput\"), mdx(\"p\", null, \"ColorInput is a custom input built with \", mdx(GatsbyLink, {\n    to: \"/core/input/\",\n    mdxType: \"GatsbyLink\"\n  }, \"Input\"), \"\\nand \", mdx(GatsbyLink, {\n    to: \"/core/input-wrapper/\",\n    mdxType: \"GatsbyLink\"\n  }, \"InputWrapper\"), \" components.\"), mdx(ColorInputDemo, {\n    mdxType: \"ColorInputDemo\"\n  }), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Input\")), mdx(\"p\", null, \"For this input we will use \", mdx(GatsbyLink, {\n    to: \"/core/input/\",\n    mdxType: \"GatsbyLink\"\n  }, \"Input\"), \" as button,\\nas we do not want to allow any free user input. We will also grab button ref for future focus management:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<Input\\n  component=\\\"button\\\"\\n  onClick={() => setDropdownOpened(true)}\\n  inputStyle={{ cursor: 'pointer' }}\\n  elementRef={controlRef}\\n  {...others}\\n>\\n  {/*\\n    Since Input is rendered as a button\\n    we can use children to display current value or placeholder\\n  */}\\n  <div style={{ display: 'flex', alignItems: 'center' }}>\\n    <ColorSwatch color={value} size={20} style={{ marginRight: 10 }} />\\n    <Text size=\\\"sm\\\" transform=\\\"uppercase\\\">\\n      {value}\\n    </Text>\\n  </div>\\n</Input>\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"InputWrapper\")), mdx(\"p\", null, \"To give ColorInput component the same label, description and error props as in other Mantine inputs,\\nwe will wrap it with \", mdx(GatsbyLink, {\n    to: \"/core/input-wrapper/\",\n    mdxType: \"GatsbyLink\"\n  }, \"InputWrapper\"), \"\\nand ensure that label is connected to input with \", mdx(GatsbyLink, {\n    to: \"/hooks/use-id/\",\n    mdxType: \"GatsbyLink\"\n  }, \"use-id\"), \" hook:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"// if input receives id from props, this id will be used,\\n// otherwise random id will be generated\\nconst uuid = useId(id);\\n\\n// We just set InputWrapper props from ColorInput props\\n// It's not a rocket science as you see\\n<InputWrapper required={required} id={uuid} label={label} error={error} description={description}>\\n  <Input id={uuid} /* other input props */ />\\n</InputWrapper>;\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Create a dropdown\")), mdx(\"p\", null, \"Dropdown is built with \", mdx(GatsbyLink, {\n    to: \"/core/paper/\",\n    mdxType: \"GatsbyLink\"\n  }, \"Paper\"), \"\\nand \", mdx(GatsbyLink, {\n    to: \"/core/color-swatch/\",\n    mdxType: \"GatsbyLink\"\n  }, \"ColorSwatch\"), \" components.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"// Colors generated from data prop\\nconst colors = data.map((color) => (\\n  <ColorSwatch\\n    key={color}\\n    // make color swatch interactive, focus styles from theme are already applied\\n    component=\\\"button\\\"\\n    color={color}\\n    onClick={() => handleChange(color)}\\n    style={{ cursor: 'pointer' }}\\n  />\\n));\\n\\nconst dropdown = (\\n  <Paper\\n    // predefined shadow and padding from theme.shadows and theme.spacing\\n    shadow=\\\"md\\\"\\n    padding=\\\"md\\\"\\n    // get element ref for focus trap and click outside\\n    elementRef={dropdownRef}\\n    // Close dropdown when user presses escape\\n    // since focus is trapped inside we do not need to pollute window with this event\\n    onKeyDownCapture={(event) => {\\n      if (event.nativeEvent.code === 'Escape') {\\n        closeDropdown();\\n      }\\n    }}\\n  >\\n    <Group position=\\\"center\\\">{colors}</Group>\\n  </Paper>\\n);\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Click outside and focus trap\")), mdx(\"p\", null, \"When dropdown is opened usually it is a good idea to trap focus inside\\nand close it with outside clicks. To implement this use \", mdx(GatsbyLink, {\n    to: \"/hooks/use-click-outside/\",\n    mdxType: \"GatsbyLink\"\n  }, \"use-click-outside\"), \"\\nand \", mdx(GatsbyLink, {\n    to: \"/hooks/use-focus-trap/\",\n    mdxType: \"GatsbyLink\"\n  }, \"use-focus-trap\"), \".\\nBoth hooks return ref that should be passed to dropdown, to combine them use \", mdx(GatsbyLink, {\n    to: \"/hooks/use-merged-ref/\",\n    mdxType: \"GatsbyLink\"\n  }, \"use-merged-ref\"), \"\\nhook:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"const focusTrapRef = useFocusTrap();\\nconst clickOutsideRef = useClickOutside(closeDropdown);\\nconst dropdownRef = useMergedRef(focusTrapRef, clickOutsideRef);\\n\\n// on dropdown component\\n<Paper elementRef={dropdownRef} /* ...other dropdown props */ />;\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Add transitions\")), mdx(\"p\", null, \"To animate dropdown presence we will use \", mdx(GatsbyLink, {\n    to: \"/core/transition/\",\n    mdxType: \"GatsbyLink\"\n  }, \"Transition\"), \"\\ncomponent, it has some premade transitions, for this example \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"skew-up\"), \" will do the job:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<Transition\\n  transition=\\\"skew-up\\\"\\n  duration={250}\\n  mounted={dropdownOpened}\\n  onExited={() => setTimeout(() => controlRef.current.focus(), 10)}\\n>\\n  {(transitionStyles) => <Paper style={transitionStyles} /* ...other dropdown props */ />}\\n</Transition>\\n\")), mdx(\"p\", null, \"When \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dropdownOpened\"), \" is false, dropdown will not be mounted to the dom\\n\\u2013 focus trap will have no effect and click outside events will not be registered.\\nWhen dropdown transition is finished we move focus back to control with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onExit\"), \" callback.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"905f71d9-6697-5b0e-a9e8-06f6804223b8","slug":"guides/inputs","__params":{"slug":"guides"}}},"staticQueryHashes":["1423860837","2548225466","3507612243"]}