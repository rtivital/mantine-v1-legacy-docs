{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/guides/ssr/","result":{"data":{"mdx":{"headings":[{"depth":1,"value":"Server side rendering"},{"depth":2,"value":"Next.js"},{"depth":3,"value":"Known issues with Next.js"},{"depth":2,"value":"Gatsby"},{"depth":2,"value":"Your own server"}],"frontmatter":{"title":"Server side rendering","package":null,"slug":"/guides/ssr/","props":null,"import":null,"docs":null,"source":null,"description":null,"bundleSize":null,"installation":null,"pageTitle":null,"license":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"order\": 0,\n  \"group\": \"guides\",\n  \"title\": \"Server side rendering\",\n  \"slug\": \"/guides/ssr/\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"server-side-rendering\"\n  }, \"Server side rendering\"), mdx(\"p\", null, \"This guide will help you get started with server side rendering with Next.js, Gatsby or your own server.\"), mdx(\"h2\", {\n    \"id\": \"nextjs\"\n  }, \"Next.js\"), mdx(Button, {\n    variant: \"outline\",\n    component: \"a\",\n    href: \"https://github.com/mantinedev/mantine-next-example\",\n    mdxType: \"Button\"\n  }, \"Next.js example source code\"), mdx(\"p\", null, \"In \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pages/_document.jsx\"), \" setup \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getInitialProps\"), \" to collect sheets with JssProvider:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import Document, { Html, Head, Main, NextScript } from 'next/document';\\nimport { SheetsRegistry, JssProvider, createGenerateId } from 'react-jss';\\n\\nexport default class _Document extends Document {\\n  static async getInitialProps(ctx) {\\n    const registry = new SheetsRegistry();\\n    const generateId = createGenerateId();\\n    const originalRenderPage = ctx.renderPage;\\n\\n    ctx.renderPage = () =>\\n      originalRenderPage({\\n        enhanceApp: (App) => (props) =>\\n          (\\n            <JssProvider registry={registry} generateId={generateId}>\\n              <App {...props} />\\n            </JssProvider>\\n          ),\\n      });\\n\\n    const initialProps = await Document.getInitialProps(ctx);\\n\\n    return {\\n      ...initialProps,\\n      styles: (\\n        <>\\n          {initialProps.styles}\\n          <style id=\\\"mantine-ssr-styles\\\">{registry.toString()}</style>\\n        </>\\n      ),\\n    };\\n  }\\n\\n  render() {\\n    return (\\n      <Html>\\n        <Head>\\n          <link rel=\\\"icon\\\" href=\\\"link to favicon\\\" />\\n        </Head>\\n        <body>\\n          <Main />\\n          <NextScript />\\n        </body>\\n      </Html>\\n    );\\n  }\\n}\\n\")), mdx(\"p\", null, \"In \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pages/_app.jsx\"), \" removed styles generated on server with useEffect and\\nadd MantineProvider in case you decide to change theme:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import React, { useEffect } from 'react';\\nimport Head from 'next/head';\\nimport { MantineProvider } from '@mantine/core';\\n\\nexport default function App(props) {\\n  const { Component, pageProps } = props;\\n\\n  useEffect(() => {\\n    const jssStyles = document.getElementById('mantine-ssr-styles');\\n    if (jssStyles) {\\n      jssStyles.parentElement.removeChild(jssStyles);\\n    }\\n  }, []);\\n\\n  return (\\n    <>\\n      <Head>\\n        <title>Mantine next example</title>\\n        <meta name=\\\"viewport\\\" content=\\\"minimum-scale=1, initial-scale=1, width=device-width\\\" />\\n      </Head>\\n      <MantineProvider\\n        theme={{\\n          /** Put your mantine theme override here */\\n          colorScheme: 'dark',\\n        }}\\n      >\\n        <Component {...pageProps} />\\n      </MantineProvider>\\n    </>\\n  );\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"known-issues-with-nextjs\"\n  }, \"Known issues with Next.js\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://cssinjs.org/react-jss/?v=v10.6.0\"\n  }, \"react-jss\"), \" during ssr shows warning:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Warning: [JSS] Rule is not linked. Missing sheet option \\\"link: true\\\".\\n\")), mdx(\"p\", null, \"This warning is a bug and described in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/cssinjs/jss/issues/1277\"\n  }, \"this issue\"), \".\\nIt would not impact styles and Mantine components in any way.\"), mdx(\"h2\", {\n    \"id\": \"gatsby\"\n  }, \"Gatsby\"), mdx(Button, {\n    variant: \"outline\",\n    component: \"a\",\n    href: \"https://github.com/mantinedev/mantine-gatsby-example\",\n    mdxType: \"Button\"\n  }, \"Gatsby example source code\"), mdx(\"p\", null, \"Install \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.gatsbyjs.com/plugins/gatsby-plugin-jss/\"\n  }, \"gatsby-plugin-jss\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"npm install gatsby-plugin-jss\\n\")), mdx(\"p\", null, \"Add gatsby-plugin-jss to your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-config.js\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"plugins: [`gatsby-plugin-jss` /* other plugins */];\\n\")), mdx(\"p\", null, \"Wrap your \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/mantinedev/mantine-gatsby-example/blob/master/src/components/layout.js\"\n  }, \"layout component\"), \" with MantineProvider (skip this step if you stick with default theme):\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import React from 'react';\\nimport { MantineProvider } from '@mantine/core';\\n\\nconst Layout = ({ children }) => {\\n  return (\\n    <MantineProvider theme={{ fontFamily: 'Verdana, sans-serif' }}>\\n      <main>{children}</main>\\n    </MantineProvider>\\n  );\\n};\\n\\nexport default Layout;\\n\")), mdx(\"h2\", {\n    \"id\": \"your-own-server\"\n  }, \"Your own server\"), mdx(\"p\", null, \"Follow \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://cssinjs.org/react-jss/?v=v10.6.0#server-side-rendering\"\n  }, \"instruction\"), \" on react-jss site.\"), mdx(\"p\", null, \"Setup JssProvider on server:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import React from 'react';\\nimport { renderToString } from 'react-dom/server';\\nimport { JssProvider, SheetsRegistry, createGenerateId } from 'react-jss';\\nimport App from './App';\\n\\nexport default function render(req, res) {\\n  const sheets = new SheetsRegistry();\\n  const generateId = createGenerateId();\\n\\n  const body = renderToString(\\n    <JssProvider registry={sheets} generateId={generateId}>\\n      <App />\\n    </JssProvider>\\n  );\\n\\n  return res.send(\\n    renderToString(\\n      <html lang=\\\"en\\\">\\n        <head>\\n          <style type=\\\"text/css\\\" id=\\\"mantine-ssr-styles\\\">\\n            {sheets.toString()}\\n          </style>\\n        </head>\\n        <body>{body}</body>\\n      </html>\\n    )\\n  );\\n}\\n\")), mdx(\"p\", null, \"In your App component use MantineProvider and remove styles generated on server\\nwith useEffect hook\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import React, { useEffect } from 'react';\\nimport { MantineProvider } from '@mantine/core';\\n\\nexport default function App(props) {\\n  const { Component, pageProps } = props;\\n\\n  useEffect(() => {\\n    const jssStyles = document.getElementById('mantine-ssr-styles');\\n    if (jssStyles) {\\n      jssStyles.parentElement.removeChild(jssStyles);\\n    }\\n  }, []);\\n\\n  return (\\n    <MantineProvider\\n      theme={{\\n        /** Put your mantine theme override here */\\n        colorScheme: 'dark',\\n      }}\\n    >\\n      <div>My app</div>\\n    </MantineProvider>\\n  );\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"cedf78b4-80e0-5f65-8093-298cff2f71f2","slug":"guides/ssr","__params":{"slug":"guides"}}},"staticQueryHashes":["1423860837","2548225466","3507612243"]}